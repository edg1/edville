<?php

function edville_custom_form_rooms_booking_availability_search_form_block_alter(&$form, &$form_state, $form_id) {
  $form['rooms_date_range']['rooms_start_date']['#attributes']['placeholder'] = $form['rooms_date_range']['rooms_start_date']['#title'];
  unset($form['rooms_date_range']['rooms_start_date']['#title']);

  $form['rooms_date_range']['rooms_end_date']['#attributes']['placeholder'] = $form['rooms_date_range']['rooms_end_date']['#title'];
  unset($form['rooms_date_range']['rooms_end_date']['#title']);


  $form['conditions']['rooms']['#options'] = array(
    -1 => $form['conditions']['rooms']['#title']
    ) + $form['conditions']['rooms']['#options'];
  $form['conditions']['rooms']['#default_value'] = -1;
  unset($form['conditions']['rooms']['#title']);
  $form['conditions']['#weight'] = 99;


  $form['rooms_fieldset']['group_size_adults:1']['#options'] = array(
    -1 => $form['rooms_fieldset']['group_size_adults:1']['#title']
    ) + $form['rooms_fieldset']['group_size_adults:1']['#options'];
  $form['rooms_fieldset']['group_size_adults:1']['#default_value'] = -1;
  unset($form['rooms_fieldset']['group_size_adults:1']['#title']);

  $form['rooms_fieldset']['group_size_children:1']['#options'] = array(
    -1 => $form['rooms_fieldset']['group_size_children:1']['#title']
    ) + $form['rooms_fieldset']['group_size_children:1']['#options'];
  $form['rooms_fieldset']['group_size_children:1']['#default_value'] = -1;
  unset($form['rooms_fieldset']['group_size_children:1']['#title']);
  
  $form['actions']['submit']['#value'] = t('Search');

  $form['#validate'][] = 'edville_custom_room_search_validate';
  $form['conditions']['rooms']['#default_value'] = 1;
  $form['conditions']['rooms']['#attributes']['class'] = array('hide');
  
}

function edville_custom_room_search_validate($form, &$form_state) {

  if ($form_state['values']['rooms'] == -1) {
    form_set_error('rooms');
  }
  if ($form_state['values']['group_size_adults:1'] == -1) {
    form_set_error('group_size_adults:1');
  }
  if ($form_state['values']['group_size_children:1'] == -1) {
    form_set_error('group_size_children:1');
  }
}

function edville_custom_form_rooms_booking_manager_change_search_form_alter(&$form, &$form_state, $form_id) {
  
  $booking_parameters = reset(unserialize($form['info']['params']['booking_parameters']['#value']));
  
  if (isset($booking_parameters['adults']) && isset($form['info']['units'])) {
    $form['info']['units']['#markup'] = '<label>People</label> <span class="info">' . $booking_parameters['adults'] . '</span>';
  }

}

function edville_custom_form_rooms_booking_availability_search_form_page_alter(&$form, &$form_state, $form_id) {
  $form['rooms_date_range']['rooms_start_date']['#attributes']['placeholder'] = $form['rooms_date_range']['rooms_start_date']['#title'];
  unset($form['rooms_date_range']['rooms_start_date']['#title']);

  $form['rooms_date_range']['rooms_end_date']['#attributes']['placeholder'] = $form['rooms_date_range']['rooms_end_date']['#title'];
  unset($form['rooms_date_range']['rooms_end_date']['#title']);


  $form['conditions']['rooms']['#options'] = array(
    -1 => $form['conditions']['rooms']['#title']
    ) + $form['conditions']['rooms']['#options'];
  unset($form['conditions']['rooms']['#title']);
  $form['conditions']['#weight'] = 99;

  $form['rooms_fieldset']['group_size_adults:1']['#options'] = array(
    -1 => $form['rooms_fieldset']['group_size_adults:1']['#title']
    ) + $form['rooms_fieldset']['group_size_adults:1']['#options'];
  unset($form['rooms_fieldset']['group_size_adults:1']['#title']);
  if (!isset($_GET['rooms_group_size1'])) {
    $form['rooms_fieldset']['group_size_adults:1']['#default_value'] = -1;
  }

  $form['rooms_fieldset']['group_size_children:1']['#options'] = array(
    -1 => $form['rooms_fieldset']['group_size_children:1']['#title']
    ) + $form['rooms_fieldset']['group_size_children:1']['#options'];
  unset($form['rooms_fieldset']['group_size_children:1']['#title']);
  if (!isset($_GET['rooms_children1'])) {
    $form['rooms_fieldset']['group_size_children:1']['#default_value'] = -1;
  }
  
  $form['actions']['submit']['#value'] = t('Search');

  $form['#validate'][] = 'edville_custom_room_search_validate';
  $form['conditions']['rooms']['#default_value'] = 1;
  $form['conditions']['rooms']['#attributes']['class'] = array('hide');
  drupal_add_js("jQuery(document).ready(function() {
    jQuery('#edit-rooms').closest('.form-type-select').hide();
  })", 'inline');
}

function edville_custom_theme() {
  return array(
    'rooms_one_month_calendar' => array(
      'template' => 'rooms_one_month_calendar',
      'variables' => array(
        'url' => NULL,
        'form' => NULL,
        'year' => NULL,
        'month' => NULL,
        'link_options' => NULL,
      ),
    ),
  );
}

/**
 * Default implementation of hook_preprocess_rooms_three_month_calendar().
 *
 * Here we setup the three-month calendar based on a specified year,
 * month, and url.
 */
function edville_custom_preprocess_rooms_one_month_calendar(&$vars) {

  if (!empty(arg(3))) {
    $vars['month'] = arg(3);
    $vars['year'] = arg(2);
    $vars['url'] = url('unit/' . arg(1));
  }
  // Load FullCalendar.
  rooms_fullcalendar_loaded();

  // Add css styles for three-month-calendar.
  drupal_add_css(drupal_get_path('module', 'rooms_availability') . '/css/rooms_three_month_calendar.css');
  drupal_add_css(drupal_get_path('module', 'rooms_availability') . '/css/fullcalendar.theme.css');

  // If dates are not provided then use the current date.
  $year = (empty($vars['year'])) ? date('Y', time()) : check_plain($vars['year']);
  $month = (empty($vars['month'])) ? date('n', time()) : check_plain($vars['month']);

  // Inject settings in javascript that will be used to setup the three months
  // display.
  drupal_add_js(array('roomsCalendar' => array('currentMonth' => intval($month))), 'setting');
  drupal_add_js(array('roomsCalendar' => array('currentYear' => intval($year))), 'setting');
  drupal_add_js(array('roomsCalendar' => array('firstDay' => intval(variable_get('date_first_day', 0)))), 'setting');

  // Calculate forward and back dates for the 3-month view calendar.
  $date1 = new DateTime("$year-$month-1");
  $date2 = new DateTime("$year-$month-1");
  $date_current = new DateTime("now");

  $forward = $date1->add(new DateInterval('P1M'));
  $backward = $date2->sub(new DateInterval('P1M'));

  // Create the links based off the url variable passed in.
  if (!isset($vars['url'])) {
    $vars['url'] = '';
  }

  $forward_path = $vars['url'] . '/' . $forward->format('Y') . '/' . $forward->format('n');
  $backward_path = $vars['url'] . '/' . $backward->format('Y') . '/' . $backward->format('n');
  $current_path = $vars['url'] . '/' . $date_current->format('Y') . '/' . $date_current->format('n');

  if (!is_array($vars['link_options']) || empty($vars['link_options'])) {
    $vars['link_options'] = array();
  }
  $vars['forward_link'] = l(t('Forward'), $forward_path, $vars['link_options']);
  $vars['backward_link'] = l(t('Back'), $backward_path, $vars['link_options']);
  $vars['current_link'] = l(t('Current'), $current_path, $vars['link_options']);
}

function get_avaiable_in_current_month($unit_id) {
  $query = db_select('rooms_availability', 'a');
  $query->fields('a');
  $query->condition('a.unit_id', $unit_id);
  $query->condition('a.year', date("Y"));
  $query->condition('a.month', date("m"));

  $months = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $data = reset($months);

  $dt_min = new DateTime("last monday");
  $dt_max = clone($dt_min);
  $dt_max->modify('+4 days');
  
  $min_day = Date('d');
  $max_day = $dt_max->format('d');



  $result = array();

  // Begin test
  $min_day = 7;
  $data['d10'] = 12;
  $data['d11'] = 12;
  // End test

  $j = $min_day;
  $k = 0;
  for ($i = $min_day; $i <= $max_day;) {
    if ($data['d' . $i] == 1) {
      if (($i > $j + 1) || ($i == $j)) {
        $result['rang_in_week'][$k]['start'] = $i; 
      }
      else {
        $end = $i;
        if ($i == $max_day) {
          $result['rang_in_week'][$k]['end'] = $end; 
        }
      }
      $j = $i;
    }
    else {
      if (isset($result['rang_in_week'][$k]['start'])) {
        $result['rang_in_week'][$k]['end'] = $end;   
        $k++;
      }
      
      $j = $i;
      $j++;
    }
    
    $i++; 
  }

  // print_r($result);die;
}

function isWeekend($date) {
  return (date('N', strtotime($date)) >= 6);
}